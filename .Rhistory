complete_cases = TRUE)
CGG.FP <- "FP.CGG" %>%
tq_get("stock.prices",
from = "2008-04-01",
to = "2012-01-01",
complete_cases = TRUE)
CGG <- "CGG" %>%
tq_get("stock.prices",
from = "2008-04-01",
to = "2012-01-01",
complete_cases = TRUE)
CGG
tail(CGG)
CGG <- "CGG" %>%
tq_get("stock.prices",
from = "2008-04-01",
to = "2017-12-01",
complete_cases = TRUE)
tail(CGG)
stockContribution <- msciIndexConstituent %>%
group_by(Instrument_ID) %>%
mutate(ContributionToIndex = (dplyr::lead(USD_Value, 1) - USD_Value) / USD_Value * Weight,
USD_Return = dplyr::lead(USD_Value, 1) / USD_Value) %>%
ungroup() %>%
filter(abs(ContributionToIndex) > 0.1)
stockContribution
stockContribution
stockContribution <- msciIndexConstituent %>%
group_by(Instrument_ID) %>%
mutate(ContributionToIndex = (dplyr::lead(USD_Value, 1) - USD_Value) / USD_Value * Weight,
USD_Return = dplyr::lead(USD_Value, 1) / USD_Value) %>%
ungroup()
stockContribution
stockContribution %>% filter(Instrument_ID = 363)
stockContribution %>% filter(Instrument_ID == 363)
stockContribution %>% filter(Instrument_ID == 17532)
stockContribution %>% filter(Instrument_ID == 17532 & Value < 20)
print(stockContribution %>% filter(Instrument_ID == 17532 & Value < 20), topn=20)
print(stockContribution %>% filter(Instrument_ID == 17532), topn=20)
temp <- stockContribution %>% filter(Instrument_ID == 17532)
View(temp)
View(temp)
stockContribution %>% filter(abs(USD_Return) > 2)
stockContribution %>% filter(abs(USD_Return) > 2)
stockContribution %>% filter(abs(ContributionToIndex) > 0.1)
stockContribution %>% filter(abs(ContributionToIndex) > 0.1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# library(ggplot2)
library(scales)
library(tidyquant)
msciIndex <- read_csv(file = "./Datasets/MSCI_monthly_value.csv")
summary(msciIndex)
msciIndexConstituent <- read_csv(file = "./Datasets/MSCI_constituent_monthly_price.csv")
summary(msciIndexConstituent)
msciIndex <- msciIndex %>%
mutate(TotalReturn = dplyr::lead(Value, 1) / Value, MonthEndDate = as.Date(paste0(as.numeric(format(Date,"%Y%m"))+1,"01"),"%Y%m%d")-1) %>%
filter(MonthEndDate > '2008-05-31')
msciIndexTotalReturnPlot <- ggplot(msciIndex[ , c("MonthEndDate", "TotalReturn")], aes(x = MonthEndDate, y = TotalReturn)) + geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndex[, "UnitValue"] <- cumprod(msciIndex[ , "TotalReturn"])
msciIndexUnitPlot <- ggplot(msciIndex[-1, c("MonthEndDate", "UnitValue")], aes(x = MonthEndDate, y = UnitValue)) + geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndexConstituentPriceReturn <- msciIndexConstituent %>%
group_by(Instrument_ID) %>%
mutate(Return = dplyr::lead(USD_Value, 1) / USD_Value) %>%
ungroup() %>%
filter(!is.na(Return) & !is.na(Weight)) %>%
group_by(MonthEndDate = as.Date(paste0(as.numeric(format(End_Date,"%Y%m"))+1,"01"),"%Y%m%d")-1) %>%
summarise(IndexPriceReturn = sum(Return * Weight / 100), WeightSum = sum(Weight)) %>%
filter(MonthEndDate > '2008-05-31')
msciIndexConstituentPriceReturn[,"UnitValue"] <- cumprod(msciIndexConstituentPriceReturn[, "IndexPriceReturn"])
msciIndexConstituentReturnPlot <- ggplot(msciIndexConstituentPriceReturn[-1, c("MonthEndDate", "IndexPriceReturn")], aes(x = MonthEndDate, y = IndexPriceReturn)) + geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndexConstituentUnitPlot <- ggplot(msciIndexConstituentPriceReturn[-1, c("MonthEndDate", "UnitValue")], aes(x = MonthEndDate, y = UnitValue)) + geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msci <- merge(x = msciIndex, y = msciIndexConstituentPriceReturn, by = "MonthEndDate", all = TRUE) %>%
select(MonthEndDate, TotalReturn, trUnitValue = UnitValue.x, PriceReturn = IndexPriceReturn, prUnitValue = UnitValue.y)
diffMonth <- msci %>%
mutate(diff = abs(PriceReturn - TotalReturn)) %>%
filter(diff > 0.02 & PriceReturn > TotalReturn)
stockContribution <- msciIndexConstituent %>%
group_by(Instrument_ID) %>%
mutate(ContributionToIndex = (dplyr::lead(USD_Value, 1) - USD_Value) / USD_Value * Weight,
USD_Return = dplyr::lead(USD_Value, 1) / USD_Value) %>%
ungroup()
stockPriceDream <- msciIndexConstituent %>%
mutate(MonthEndDate = as.Date(paste0(as.numeric(format(End_Date,"%Y%m"))+1,"01"),"%Y%m%d")-1) %>%
filter(MonthEndDate == '2009-10-31' | MonthEndDate == '2009-11-30') %>%
select(MonthEndDate, Ticker, Weight, Value, USD_Value)
stockPriceYahoo <- temp %>%
distinct(Ticker) %>%
tq_get(get = "stock.prices",
from = "2009-10-31",
to = "2009-11-30",
complete_cases = TRUE,
collapse = "monthly")
diffMonth
msciIndexTotalReturnPlot
msciIndexUnitPlot
msciIndexConstituentUnitPlot
# Monthly rebalancing with 5 year training period and 4 year rolling window
bt.opt2 <- optimize.portfolio.rebalancing(R, portf,
optimize_method="ROI",
rebalance_on="months",
training_period=60,
rolling_window=48)
install.packages(PortfolioAnalytics)
install.packages("PortfolioAnalytics")
library(PortfolioAnalytics)
bt.opt2
portf
cities <- c("das", "324321ds", "dsa")
lapply(cities, class)
lapply(cities, nchar)
unlist(lapply(cities, nchar))
str(lapply(cities, nchar))
?str
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# library(ggplot2)
library(scales)
library(tidyquant)
msciIndex <- read_csv(file = "./Datasets/MSCI_monthly_value.csv")
summary(msciIndex)
msciIndexConstituent <- read_csv(file = "./Datasets/MSCI_constituent_monthly_price.csv")
summary(msciIndexConstituent)
msciIndex <- msciIndex %>%
mutate(TotalReturn = dplyr::lead(Value, 1) / Value, MonthEndDate = as.Date(paste0(as.numeric(format(Date,"%Y%m"))+1,"01"),"%Y%m%d")-1) %>%
filter(MonthEndDate > '2008-05-31')
msciIndexTotalReturnPlot <- ggplot(msciIndex[ , c("MonthEndDate", "TotalReturn")], aes(x = MonthEndDate, y = TotalReturn)) + geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndex[, "UnitValue"] <- cumprod(msciIndex[ , "TotalReturn"])
msciIndexUnitPlot <- ggplot(msciIndex[-1, c("MonthEndDate", "UnitValue")], aes(x = MonthEndDate, y = UnitValue)) + geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndexConstituentPriceReturn <- msciIndexConstituent %>%
group_by(Instrument_ID) %>%
mutate(Return = dplyr::lead(USD_Value, 1) / USD_Value) %>%
ungroup() %>%
filter(!is.na(Return) & !is.na(Weight)) %>%
group_by(MonthEndDate = as.Date(paste0(as.numeric(format(End_Date,"%Y%m"))+1,"01"),"%Y%m%d")-1) %>%
summarise(IndexPriceReturn = sum(Return * Weight / 100), WeightSum = sum(Weight)) %>%
filter(MonthEndDate > '2008-05-31')
msciIndexConstituentPriceReturn[,"UnitValue"] <- cumprod(msciIndexConstituentPriceReturn[, "IndexPriceReturn"])
msciIndexConstituentReturnPlot <- ggplot(msciIndexConstituentPriceReturn[-1, c("MonthEndDate", "IndexPriceReturn")], aes(x = MonthEndDate, y = IndexPriceReturn)) + geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndexConstituentUnitPlot <- ggplot(msciIndexConstituentPriceReturn[-1, c("MonthEndDate", "UnitValue")], aes(x = MonthEndDate, y = UnitValue)) + geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msci <- merge(x = msciIndex, y = msciIndexConstituentPriceReturn, by = "MonthEndDate", all = TRUE) %>%
select(MonthEndDate, TotalReturn, trUnitValue = UnitValue.x, PriceReturn = IndexPriceReturn, prUnitValue = UnitValue.y)
diffMonth <- msci %>%
mutate(diff = abs(PriceReturn - TotalReturn)) %>%
filter(diff > 0.02 & PriceReturn > TotalReturn)
stockContribution <- msciIndexConstituent %>%
group_by(Instrument_ID) %>%
mutate(ContributionToIndex = (dplyr::lead(USD_Value, 1) - USD_Value) / USD_Value * Weight,
USD_Return = dplyr::lead(USD_Value, 1) / USD_Value) %>%
ungroup()
stockPriceDream <- msciIndexConstituent %>%
mutate(MonthEndDate = as.Date(paste0(as.numeric(format(End_Date,"%Y%m"))+1,"01"),"%Y%m%d")-1) %>%
filter(MonthEndDate == '2009-10-31' | MonthEndDate == '2009-11-30') %>%
select(MonthEndDate, Ticker, Weight, Value, USD_Value)
stockPriceYahoo <- temp %>%
distinct(Ticker) %>%
tq_get(get = "stock.prices",
from = "2009-10-31",
to = "2009-11-30",
complete_cases = TRUE,
collapse = "monthly")
diffMonth
msci
diffMonth
stockContribution
stockContribution %>%
msciIndexConstituent <- read_csv(file = "./Datasets/MSCI_constituent_monthly_price.csv", na.strings = c("", "NULL"))
msciIndexConstituent <- read_csv(file = "./Datasets/MSCI_constituent_monthly_price.csv", na = c("", "NULL"))
summary(msciIndexConstituent)
msciIndex <- msciIndex %>%
mutate(TotalReturn = dplyr::lead(Value, 1) / Value, MonthEndDate = as.Date(paste0(as.numeric(format(Date,"%Y%m"))+1,"01"),"%Y%m%d")-1) %>%
filter(MonthEndDate > '2008-05-31')
msciIndexTotalReturnPlot <- ggplot(msciIndex[ , c("MonthEndDate", "TotalReturn")], aes(x = MonthEndDate, y = TotalReturn)) + geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndex[, "UnitValue"] <- cumprod(msciIndex[ , "TotalReturn"])
msciIndexUnitPlot <- ggplot(msciIndex[-1, c("MonthEndDate", "UnitValue")], aes(x = MonthEndDate, y = UnitValue)) + geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndexUnitPlot
?dplyr::lead
msciIndexConstituentPriceReturn <- msciIndexConstituent %>%
mutate(MonthEndDate = as.Date(paste0(as.numeric(format(End_Date,"%Y%m"))+1,"01"),"%Y%m%d")-1) %>%
group_by(Instrument_ID) %>%
mutate(Return = dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) / USD_Value) %>%
ungroup() %>%
filter(!is.na(Return) & !is.na(Weight)) %>%
group_by(MonthEndDate) %>%
summarise(IndexPriceReturn = sum(Return * Weight / 100), WeightSum = sum(Weight)) %>%
filter(MonthEndDate > '2008-05-31')
msciIndexConstituentPriceReturn[,"UnitValue"] <- cumprod(msciIndexConstituentPriceReturn[, "IndexPriceReturn"])
msciIndexConstituentReturnPlot <- ggplot(msciIndexConstituentPriceReturn[-1, c("MonthEndDate", "IndexPriceReturn")], aes(x = MonthEndDate, y = IndexPriceReturn)) + geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndexConstituentUnitPlot <- ggplot(msciIndexConstituentPriceReturn[-1, c("MonthEndDate", "UnitValue")], aes(x = MonthEndDate, y = UnitValue)) + geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndexConstituentUnitPlot
msciIndexConstituentPriceReturn
View(msciIndexConstituentPriceReturn)
View(msciIndexConstituentPriceReturn)
msciIndexUnitPlot
view(msciIndex)
View(msciIndex)
msciIndex <- msciIndex %>%
mutate(TotalReturn = dplyr::lead(Value, 1) / Value, MonthEndDate = as.Date(paste0(as.numeric(format(Date,"%Y%m"))+1,"01"),"%Y%m%d")-1) %>%
filter(MonthEndDate > '2008-05-31' & MonthEndDate < '2017-11-30')
msciIndexTotalReturnPlot <-
ggplot(msciIndex[ , c("MonthEndDate", "TotalReturn")], aes(x = MonthEndDate, y = TotalReturn)) +
geom_point() +
scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndex[, "UnitValue"] <- cumprod(msciIndex[ , "TotalReturn"])
msciIndexUnitPlot <-
ggplot(msciIndex[-1, c("MonthEndDate", "UnitValue")], aes(x = MonthEndDate, y = UnitValue)) +
geom_point() +
scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndexUnitPlot
msciIndexConstituentPriceReturn <- msciIndexConstituent %>%
mutate(MonthEndDate = as.Date(paste0(as.numeric(format(End_Date,"%Y%m"))+1,"01"),"%Y%m%d")-1) %>%
group_by(Instrument_ID) %>%
mutate(Return = dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) / USD_Value) %>%
ungroup() %>%
filter(!is.na(Return) & !is.na(Weight)) %>%
group_by(MonthEndDate) %>%
summarise(IndexPriceReturn = sum(Return * Weight / 100), WeightSum = sum(Weight)) %>%
filter(MonthEndDate > '2008-05-31' & MonthEndDate < '2017-11-30')
msciIndexConstituentPriceReturn[,"UnitValue"] <- cumprod(msciIndexConstituentPriceReturn[, "IndexPriceReturn"])
msciIndexConstituentReturnPlot <-
ggplot(msciIndexConstituentPriceReturn[-1, c("MonthEndDate", "IndexPriceReturn")], aes(x = MonthEndDate, y = IndexPriceReturn)) +
geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndexConstituentUnitPlot <-
ggplot(msciIndexConstituentPriceReturn[-1, c("MonthEndDate", "UnitValue")], aes(x = MonthEndDate, y = UnitValue)) +
geom_point() +
scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndexConstituentUnitPlot
msci <- merge(x = msciIndex, y = msciIndexConstituentPriceReturn, by = "MonthEndDate", all = TRUE) %>%
select(MonthEndDate, TotalReturn, trUnitValue = UnitValue.x, PriceReturn = IndexPriceReturn, prUnitValue = UnitValue.y)
diffMonth <- msci %>%
mutate(diff = abs(PriceReturn - TotalReturn)) %>%
filter(diff > 0.02 & PriceReturn > TotalReturn)
diffMonth
stockContribution <- msciIndexConstituent %>%
group_by(Instrument_ID) %>%
mutate(ContributionToIndex = (dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) - USD_Value) / USD_Value * Weight,
USD_Return = dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) / USD_Value) %>%
ungroup()
msciIndexConstituent %>%
mutate(MonthEndDate = as.Date(paste0(as.numeric(format(End_Date,"%Y%m"))+1,"01"),"%Y%m%d")-1)
msciIndexConstituent <- msciIndexConstituent %>%
mutate(MonthEndDate = as.Date(paste0(as.numeric(format(End_Date,"%Y%m"))+1,"01"),"%Y%m%d")-1)
summary(msciIndexConstituent)
stockContribution <- msciIndexConstituent %>%
group_by(Instrument_ID) %>%
mutate(ContributionToIndex = (dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) - USD_Value) / USD_Value * Weight,
USD_Return = dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) / USD_Value) %>%
ungroup()
stockContribution
View(stockContribution)
diffMonth
stockContribution %>% filter(abs(ContributionToIndex) > 0.1)
temp <- stockContribution %>% filter(Instrument_ID == 17532)
CGG.FP <- "CGG.FP" %>%
tq_get("stock.prices",
from = "2008-04-01",
to = "2012-01-01",
complete_cases = TRUE) %>%
filter(date %in% stockContribution[5:11,"End_Date"])
temp
View(temp)
temp %>%
mutate(MonthEndDate = as.Date(paste0(as.numeric(format(End_Date,"%Y%m"))+1,"01"),"%Y%m%d")-1)
temp <- temp %>% filter(End_Date == "2008-12-30")
temp
format(temp$End_Date, "%Y%m)
")"
")
format(temp$End_Date, "%Y%m")
?LastDayInMonth
format(temp$End_Date, "%Y%m")
paste0(as.numeric(format(temp$End_Date, "%Y%m"), "01")
)
paste0(as.numeric(format(temp$End_Date, "%Y%m")), "01")
paste0(as.numeric(format(temp$End_Date, "%Y%m")), "01")
install.packages("timeDate")
library(timeDate)
timeLastDayInMonth(temp$End_Date)
as.Date(timeLastDayInMonth(temp$End_Date))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# library(ggplot2)
library(scales)
library(tidyquant)
library(timeDate)
msciIndexConstituent <- read_csv(file = "./Datasets/MSCI_constituent_monthly_price.csv", na = c("", "NULL"))
msciIndexConstituent <- msciIndexConstituent %>%
mutate(MonthEndDate = as.Date(timeLastDayInMonth(End_Date)))
summary(msciIndexConstituent)
msciIndexConstituentPriceReturn <- msciIndexConstituent %>%
group_by(Instrument_ID) %>%
mutate(Return = dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) / USD_Value) %>%
ungroup() %>%
filter(!is.na(Return) & !is.na(Weight)) %>%
group_by(MonthEndDate) %>%
summarise(IndexPriceReturn = sum(Return * Weight / 100), WeightSum = sum(Weight)) %>%
filter(MonthEndDate > '2008-05-31' & MonthEndDate < '2017-11-30')
msciIndexConstituentPriceReturn[,"UnitValue"] <- cumprod(msciIndexConstituentPriceReturn[, "IndexPriceReturn"])
msciIndexConstituentReturnPlot <-
ggplot(msciIndexConstituentPriceReturn[-1, c("MonthEndDate", "IndexPriceReturn")], aes(x = MonthEndDate, y = IndexPriceReturn)) +
geom_point() + scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msciIndexConstituentUnitPlot <-
ggplot(msciIndexConstituentPriceReturn[-1, c("MonthEndDate", "UnitValue")], aes(x = MonthEndDate, y = UnitValue)) +
geom_point() +
scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%m/%Y"))
msci <- merge(x = msciIndex, y = msciIndexConstituentPriceReturn, by = "MonthEndDate", all = TRUE) %>%
select(MonthEndDate, TotalReturn, trUnitValue = UnitValue.x, PriceReturn = IndexPriceReturn, prUnitValue = UnitValue.y)
diffMonth <- msci %>%
mutate(diff = abs(PriceReturn - TotalReturn)) %>%
filter(diff > 0.02 & PriceReturn > TotalReturn)
diffMonth
stockContribution <- msciIndexConstituent %>%
group_by(Instrument_ID) %>%
mutate(ContributionToIndex = (dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) - USD_Value) / USD_Value * Weight,
USD_Return = dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) / USD_Value) %>%
ungroup()
stockContribution %>% filter(abs(ContributionToIndex) > 0.1)
temp <- stockContribution %>% filter(Instrument_ID == 17532)
CGG.FP <- "CGG.FP" %>%
tq_get("stock.prices",
from = "2008-04-01",
to = "2012-01-01",
complete_cases = TRUE) %>%
filter(date %in% stockContribution[5:11,"End_Date"])
temp
View(temp)
stockContribution %>% filter(abs(ContributionToIndex) > 0.1)
temp <- stockContribution %>% filter(Instrument_ID == 498)
temp
View(temp)
View(stockContribution)
View(stockContribution %>% filter(abs(ContributionToIndex) > 0.1))
temp <- stockContribution %>% filter(Instrument_ID == 4370)
View(temp)
stockContribution %>% filter(abs(dplyr::lead(ContributionToIndex, n = 1L, order_by = MonthEndDate) - ContributionToIndex) / ContributionToIndex > 10)
View(stockContribution %>% filter(abs(dplyr::lead(ContributionToIndex, n = 1L, order_by = MonthEndDate) - ContributionToIndex) / ContributionToIndex > 10))
View(stockContribution %>% filter(abs(dplyr::lead(ContributionToIndex, n = 1L, order_by = MonthEndDate) - ContributionToIndex) / ContributionToIndex > 100))
View(stockContribution %>% filter(abs((dplyr::lead(ContributionToIndex, n = 1L, order_by = MonthEndDate) - ContributionToIndex) / ContributionToIndex > 100))
)
View(stockContribution %>% filter(abs(dplyr::lead(ContributionToIndex, n = 1L, order_by = MonthEndDate) - ContributionToIndex) / abs(ContributionToIndex) > 100))
View(stockContribution %>% filter(abs(dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) - USD_Value) / USD_Value > 10))
stockContribution <- stockContribution %>%
filter(abs(dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) - USD_Value) / USD_Value > 10)
temp <- stockContribution %>% filter(Instrument_ID == 4370)
View(temp)
stockContribution <- stockContribution %>%
filter(abs(dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) - USD_Value) / USD_Value > 10 | abs(dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) - USD_Value) / USD_Value < 0.1)
temp <- stockContribution %>% filter(Instrument_ID == 4370)
View(temp)
stockContribution <- msciIndexConstituent %>%
group_by(Instrument_ID) %>%
mutate(ContributionToIndex = (dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) - USD_Value) / USD_Value * Weight,
USD_Return = dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) / USD_Value) %>%
ungroup()
stockContributionOutlier <- stockContribution %>%
filter(abs(dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) - USD_Value) / USD_Value > 10 | abs(dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) - USD_Value) / USD_Value < 0.1)
temp <- stockContribution %>% filter(Instrument_ID == 4370)
CGG.FP <- "CGG.FP" %>%
tq_get("stock.prices",
from = "2008-04-01",
to = "2012-01-01",
complete_cases = TRUE) %>%
filter(date %in% stockContribution[5:11,"End_Date"])
View(temp)
View(stockContributionOutlier)
stockContributionOutlier <- stockContribution %>%
filter(dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) / USD_Value > 10 | dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) / USD_Value < 0.1)
temp <- stockContribution %>% filter(Instrument_ID == 4370)
View(stockContributionOutlier)
View(temp)
filter(change > 10 | change < 0.1)
stockContributionOutlier <- stockContribution %>%
mutate(change = dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) / USD_Value)
filter(change > 10 | change < 0.1)
stockContributionOutlier <- stockContribution %>%
mutate(change = dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) / USD_Value) %>%
filter(change > 10 | change < 0.1)
View(stockContributionOutlier)
stockContributionOutlier <- stockContribution %>%
mutate(lead = dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate)) %>%
mutate(change = dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) / USD_Value) %>%
filter(change > 10 | change < 0.1)
View(stockContributionOutlier)
stockContributionOutlier <- stockContribution %>%
group_by(Instrument_ID) %>%
mutate(lead = dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate)) %>%
mutate(change = dplyr::lead(USD_Value, n = 1L, order_by = MonthEndDate) / USD_Value) %>%
filter(change > 10 | change < 0.1)
View(stockContributionOutlier)
stockContributionOutlier <- stockContribution %>%
group_by(Instrument_ID) %>%
filter(USD_Return > 10 | USD_Return < 0.1)
View(stockContributionOutlier)
bookdown:::mathquill()
?funs
is.numeric("a")
as.numeric("a")
setwd("C:/GitHubRepo/r_crypto_sentiment/")
install.packages("twitteR")
install.packages("ROAuth")
install.packages("purrrlyr")
install.packages("text2vec")
install.packages("caret")
install.packages("glmnet")
install.packages("ggrepel")
source('C:/GitHubRepo/r_crypto_sentiment/model_training.R')
source('C:/GitHubRepo/r_crypto_sentiment/my_twitter_sensiment_test.R')
df_tweets
View(df_tweets)
mean(df_tweets$sentiment)
summary(df_tweets)
source('C:/GitHubRepo/r_crypto_sentiment/my_twitter_sensiment_visualisation_test.R')
# color palette
cols <- c("#ce472e", "#f05336", "#ffd73e", "#eec73a", "#4ab04a")
set.seed(932)
samp_ind <- sample(c(1:nrow(df_tweets)), nrow(df_tweets) * 0.1) # 10% for labeling
# plotting
ggplot(df_tweets, aes(x = created, y = sentiment, color = sentiment)) +
theme_minimal() +
scale_color_gradientn(colors = cols, limits = c(0, 1),
breaks = seq(0, 1, by = 1/4),
labels = c("0", round(1/4*1, 1), round(1/4*2, 1), round(1/4*3, 1), round(1/4*4, 1)),
guide = guide_colourbar(ticks = T, nbin = 50, barheight = .5, label = T, barwidth = 10)) +
geom_point(aes(color = sentiment), alpha = 0.8) +
geom_hline(yintercept = 0.65, color = "#4ab04a", size = 1.5, alpha = 0.6, linetype = "longdash") +
geom_hline(yintercept = 0.35, color = "#f05336", size = 1.5, alpha = 0.6, linetype = "longdash") +
geom_smooth(size = 1.2, alpha = 0.2) +
geom_label_repel(data = df_tweets[samp_ind, ],
aes(label = round(sentiment, 2)),
fontface = 'bold',
size = 2.5,
max.iter = 100) +
theme(legend.position = 'bottom',
legend.direction = "horizontal",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 20, face = "bold", vjust = 2, color = 'black', lineheight = 0.8),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 8, face = "bold", color = 'black'),
axis.text.x = element_text(size = 8, face = "bold", color = 'black')) +
ggtitle("Tweets Sentiment rate (probability of positiveness)")
source('C:/GitHubRepo/r_crypto_sentiment/my_twitter_sensiment_test.R')
source('C:/GitHubRepo/r_crypto_sentiment/my_twitter_sensiment_visualisation_test.R')
# color palette
cols <- c("#ce472e", "#f05336", "#ffd73e", "#eec73a", "#4ab04a")
set.seed(932)
samp_ind <- sample(c(1:nrow(df_tweets)), nrow(df_tweets) * 0.1) # 10% for labeling
# plotting
ggplot(df_tweets, aes(x = created, y = sentiment, color = sentiment)) +
theme_minimal() +
scale_color_gradientn(colors = cols, limits = c(0, 1),
breaks = seq(0, 1, by = 1/4),
labels = c("0", round(1/4*1, 1), round(1/4*2, 1), round(1/4*3, 1), round(1/4*4, 1)),
guide = guide_colourbar(ticks = T, nbin = 50, barheight = .5, label = T, barwidth = 10)) +
geom_point(aes(color = sentiment), alpha = 0.8) +
geom_hline(yintercept = 0.65, color = "#4ab04a", size = 1.5, alpha = 0.6, linetype = "longdash") +
geom_hline(yintercept = 0.35, color = "#f05336", size = 1.5, alpha = 0.6, linetype = "longdash") +
geom_smooth(size = 1.2, alpha = 0.2) +
# geom_label_repel(data = df_tweets[samp_ind, ],
#                  aes(label = round(sentiment, 2)),
#                  fontface = 'bold',
#                  size = 2.5,
#                  max.iter = 100) +
theme(legend.position = 'bottom',
legend.direction = "horizontal",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 20, face = "bold", vjust = 2, color = 'black', lineheight = 0.8),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 8, face = "bold", color = 'black'),
axis.text.x = element_text(size = 8, face = "bold", color = 'black')) +
ggtitle("Tweets Sentiment rate (probability of positiveness)")
summary(df_tweets)
source('C:/GitHubRepo/r_crypto_sentiment/my_twitter_sensiment_test.R')
summary(df_tweets)
args(searchTwitter)
?searchTwitter
source('C:/GitHubRepo/r_crypto_sentiment/my_twitter_sensiment_test.R')
source('C:/GitHubRepo/r_crypto_sentiment/my_twitter_sensiment_test.R')
source('C:/GitHubRepo/r_crypto_sentiment/my_twitter_sensiment_test.R')
# color palette
cols <- c("#ce472e", "#f05336", "#ffd73e", "#eec73a", "#4ab04a")
set.seed(932)
samp_ind <- sample(c(1:nrow(df_tweets)), nrow(df_tweets) * 0.1) # 10% for labeling
# plotting
ggplot(df_tweets, aes(x = created, y = sentiment, color = sentiment)) +
theme_minimal() +
scale_color_gradientn(colors = cols, limits = c(0, 1),
breaks = seq(0, 1, by = 1/4),
labels = c("0", round(1/4*1, 1), round(1/4*2, 1), round(1/4*3, 1), round(1/4*4, 1)),
guide = guide_colourbar(ticks = T, nbin = 50, barheight = .5, label = T, barwidth = 10)) +
geom_point(aes(color = sentiment), alpha = 0.8) +
geom_hline(yintercept = 0.65, color = "#4ab04a", size = 1.5, alpha = 0.6, linetype = "longdash") +
geom_hline(yintercept = 0.35, color = "#f05336", size = 1.5, alpha = 0.6, linetype = "longdash") +
geom_smooth(size = 1.2, alpha = 0.2) +
# geom_label_repel(data = df_tweets[samp_ind, ],
#                  aes(label = round(sentiment, 2)),
#                  fontface = 'bold',
#                  size = 2.5,
#                  max.iter = 100) +
theme(legend.position = 'bottom',
legend.direction = "horizontal",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 20, face = "bold", vjust = 2, color = 'black', lineheight = 0.8),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 8, face = "bold", color = 'black'),
axis.text.x = element_text(size = 8, face = "bold", color = 'black')) +
ggtitle("Tweets Sentiment rate (probability of positiveness)")
